#https://medium.com/@bidyutnayak10/containerizing-next-js-app-with-docker-lightweight-image-6a53f8c61f15

# Add the base image
FROM node:18-alpine AS base  

# Install dependencies only when needed
FROM base AS deps

# Install packages with no cache
RUN apk add --no-cache libc6-compat

# Install dependencies based on the preferred package manager

WORKDIR /app

COPY package.json ./


RUN npm update && npm install 

#Rebuild the source code only when needed

FROM base AS builder 

WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .

#Build the code

#if npm package, then follow this:

RUN npm run build 


#Production image, copy all the files and run next

FROM base AS runner 
WORKDIR /app
ENV NONE_ENV production 

#create a system group named nodejs

RUN addgroup --system --grid 1001 nodejs

#create a system group named nextjs

RUN adduser --system --uid 1001 nextjs


#copy the file from to public folder 

COPY --from=builder /app/public ./public 


#Set the correct permission for pre-render cache 

RUN mkdir .next 
RUN chown nextjs:nodejs .next


# Reduce the image size 

COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./

COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static


# Expose the port: Next.js by default port 3000 If In your application running different port then change the expose port.

USER nextjs

# if in your application 3000 will not run, then change the expose port
# ex: EXPOSE <port>

EXPOSE 3000

# set Environment port
ENV PORT 3000

# server.js is created by next build from the standalone output

CMD ["node", "server.js"]


